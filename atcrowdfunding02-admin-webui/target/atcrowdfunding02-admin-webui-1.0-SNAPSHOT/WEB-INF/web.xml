<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">
    <welcome-file-list>
        <welcome-file></welcome-file>
    </welcome-file-list>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求设置字符集-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应设置字符集-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这个filter要在所有的filter之前执行-->
    <!--request.setCharacterEncoding(encoding)必须在request.getParameter前面-->
    <!--response.setCharacterEncoding(encoding)必须在response.getWriter()前面-->
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-persist-mvc.xml</param-value>
        </init-param>
        <!--Servlet默认生命周期中，创建对象是在第一次接收到请求时-->
        <!--而DispatcherServlet创建对象后有大量的“框架初始化”工作，不适合在第一次请求时来做-->
        <!--设置load-on-startup就是为了让DispatcherServlet在Web应用启动时创建对象、初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <!--url-pattern配置方式一：/表示拦截所有请求-->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>

        <!--url-pattern配置方式二：配置请求扩展名-->
        <!--优点：1、xxx.css、xxx.js、xxx.png等静态资源完全不经过SpringMVC，不需要特殊处理-->
        <!--优点：2、可以实现伪静态效果。表面上看起来是访问一个HTML文件这样的静态资源，但是实际上是经过Java代码运算的结果-->
        <!--    伪静态作用1：给黑客入侵增加难度-->
        <!--    伪静态作用2：有利于SEO的优化-->
        <!--缺点：不符合RESTFUL风格-->
        <!--<url-pattern>*.html</url-pattern>-->
    </servlet-mapping>


    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
